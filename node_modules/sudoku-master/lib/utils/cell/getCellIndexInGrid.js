"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = require("ramda");
const remeda_1 = require("remeda");
const fp_1 = require("../fp");
const _getCellIndexInGridByHouse = (cellHouse) => {
    return ramda_1.cond([
        [remeda_1.equals("row"), ramda_1.always((cellHouse.houseIndex * 9 + cellHouse.cellIndex))],
        [remeda_1.equals("col"), ramda_1.always((cellHouse.houseIndex + cellHouse.cellIndex * 9))],
        [
            remeda_1.equals("box"),
            ramda_1.always((Math.floor(cellHouse.cellIndex / 3) * 9 + // row
                (cellHouse.cellIndex % 3) + // col
                Math.floor(cellHouse.houseIndex / 3) * 9 * 3 + // row offset
                (cellHouse.houseIndex % 3) * 3)),
        ],
    ])(cellHouse.houseType);
};
/**
 * Calculate the index (between 0 and 80) of a given cell.
 *
 * @private
 * @since 0.0.2
 *
 * @param {CellCoord | GridIndex | CellHouse} cell The cell for which to find the grid index.
 * @returns {number} The index of the cell in the grid.
 *
 * @example
 * getCellIndexInGrid([5, 4]);
 * // => 49
 * getCellIndexInGrid(72);
 * // => 72
 * getCellIndexInGrid({ houseType: "col", houseIndex: 5, cellIndex: 4});
 * // => 41
 */
function getCellIndexInGrid(cell) {
    return ramda_1.cond([
        [Array.isArray, (cellCoord) => (cellCoord[0] * 9 + cellCoord[1])],
        [ramda_1.is(Number), (gridIndex) => gridIndex],
        [fp_1.isTypeOf("object"), (cellHouse) => _getCellIndexInGridByHouse(cellHouse)],
    ])(cell);
}
exports.getCellIndexInGrid = getCellIndexInGrid;
