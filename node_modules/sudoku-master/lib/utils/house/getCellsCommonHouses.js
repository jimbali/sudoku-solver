"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const remeda_1 = require("remeda");
const getCellHouses_1 = require("./getCellHouses");
const ramda_1 = require("ramda");
/**
 * Find the houses that are shared by all the given cells.
 *
 * **Note:** If the given cells are all identical, returns `undefined`.
 *
 * @private
 * @since 0.0.3
 *
 * @param cells The cells for which to find the common houses.
 * @returns A tuple containing one or two houses that are common to given cells; otherwise, if the cells have no common
 * houses or if the cells are identical, `undefined`.
 */
function getCellsCommonHouses(cells) {
    const allCellsHouses = remeda_1.map(cells, getCellHouses_1.getCellHouses);
    const commonHouses = remeda_1.pipe(cells, remeda_1.map(getCellHouses_1.getCellHouses), remeda_1.flatten(), remeda_1.filter((house) => ramda_1.all((houses) => ramda_1.includes(house, houses), allCellsHouses)), remeda_1.uniqBy((house) => house.type + house.index));
    return ramda_1.cond([
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        [remeda_1.equals(1), (_) => [commonHouses[0], undefined]],
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        [remeda_1.equals(2), (_) => [commonHouses[0], commonHouses[1]]],
    ])(commonHouses.length);
}
exports.getCellsCommonHouses = getCellsCommonHouses;
