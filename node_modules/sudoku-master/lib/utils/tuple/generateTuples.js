"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const remeda_1 = require("remeda");
const ramda_1 = require("ramda");
const isDuplicate = (currentTuple, currentIndex, currentValue) => {
    return currentTuple[currentIndex - 1] !== undefined && currentTuple[currentIndex - 1] < currentValue;
};
/**
 * Generate a list of all the possible tuples of n elements with the given values.
 *
 * @private
 * @since 0.0.3
 *
 * @param options Options for the generation of the tuples.
 * @param options.size Size of the tuples to generate.
 * @param options.validValues Values that the tuples can contain.
 * @param [options.getDuplicates=true] Indicates whether the generated tuples can contain duplicates in different orders
 * (e.g. [0, 1] and [1, 0] are considered as duplicates).
 * @param [options.getSameValues=true] Indicates whether the generated tuples can contain the same value twice (e.g.
 * [1, 1] contains the value "1" twice).
 * @returns A list containing the generated tuples.
 */
function generateTuples({ size, validValues, getDuplicates = true, getSameValues = true, }) {
    const finalIndex = size - 1;
    const findTuple = (index, previous) => {
        return remeda_1.pipe(validValues, remeda_1.uniq(), remeda_1.filter((value) => getSameValues || !ramda_1.includes(value, previous)), remeda_1.map((value) => {
            return { value, tuple: [...previous, value] };
        }), remeda_1.filter((entry) => getDuplicates || !isDuplicate(entry.tuple, index, entry.value)), remeda_1.map((entry) => (index === finalIndex ? [entry.tuple] : findTuple(index + 1, entry.tuple))), remeda_1.flatten());
    };
    return findTuple(0, []);
}
exports.generateTuples = generateTuples;
