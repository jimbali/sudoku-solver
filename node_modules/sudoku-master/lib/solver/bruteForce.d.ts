import { Digit, SudokuGrid } from "../types";
export declare enum BruteForceMode {
    DepthFirstSearch = 0
}
/**
 * Solves a grid using a backtracking algorithm.
 *
 * The program will place a digit into a cell (following the constraints of the game), and continue until it finds the
 * solution or hits a dead end. If the algorithm cannot place any new digit according to the constraints of the game,
 * meaning it has reached a dead end, it removes the one or several placed digits and tries a new alternative. This
 * process continue until either all alternatives have been tried or the grid has been solved.
 *
 * **Note:** This process can be slow. Some grids are also designed to resist this kind of algorithm for a longer time.
 *
 * @summary Solves a grid using a backtracking algorithm.
 *
 * @since 0.0.1
 *
 * @param {SudokuGrid} grid The grid to solve.
 * @param {BruteForceMode} mode The type of algorithm to use to solve the puzzle.
 * @returns {ReadonlyMap<GridIndex, Digit> | undefined} The solution of the grid if it has been found; otherwise,
 * `undefined`.
 *
 * @example
 * const grid = parseGrid(`
 *   +---+---+---+
 *   |-7-|2-3|-8-|
 *   |345|798|126|
 *   |2-8|-4-|---|
 *   +---+---+---+
 *   |4--|5-9|8-2|
 *   |-5-|8-4|-9-|
 *   |8--|---|--1|
 *   +---+---+---+
 *   |---|---|--8|
 *   |-8-|---|-7-|
 *   |62-|-87|-15|
 *   +---+---+---+`);
 * const solution = solveWithBacktracking(grid);
 * serializeGrid({ digits: solution, candidates: new Map() });
 * // => "971263584345798126268145937437519862156824793892376451713952648584631279629487315"
 *
 * @see http://sudopedia.enjoysudoku.com/Backtracking_Algorithms.html
 * @see https://en.wikipedia.org/wiki/Backtracking
 * @see https://en.wikipedia.org/wiki/Sudoku_solving_algorithms
 */
export declare function solveWithBacktracking(grid: SudokuGrid, mode?: BruteForceMode): ReadonlyMap<number, Digit> | undefined;
