"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const remeda_1 = require("remeda");
const types_1 = require("../types");
const types_2 = require("../../../../types");
const house_1 = require("../../../../utils/house");
const subset_1 = require("../../../../utils/subset");
const types_3 = require("./types");
const candidate_1 = require("../../../../utils/candidate");
const cell_1 = require("../../../../utils/cell");
const getHiddenSubsetData = (candidates) => {
    return (house) => {
        return {
            house,
            lookup: new Map(remeda_1.map(house.cells, (cell) => [cell, candidates.get(cell) || []])),
        };
    };
};
const getHiddenSubsetEliminationResult = (candidates, level) => {
    return (subset) => {
        return {
            technique: `Hidden ${types_3.SUBSET_LEVEL_LABEL.get(level)}`,
            eliminations: remeda_1.pipe(remeda_1.difference(types_2.VALID_DIGITS, subset.result.subsetValues), remeda_1.map((digit) => {
                return {
                    digit,
                    coords: remeda_1.map(candidate_1.getCellsContainingCandidate(digit, candidates, subset.result.subsetIndexes), cell_1.getCellCoord),
                };
            }), remeda_1.filter((elim) => elim.coords.length > 0)),
            implication: {
                type: types_1.EliminationImplicationType.Subset,
                cells: remeda_1.map(subset.result.subsetIndexes, cell_1.getCellCoord),
                digits: subset.result.subsetValues,
            },
        };
    };
};
/**
 * A Hidden Subset is formed when N digits have only candidates in N cells in a house. All candidates in the cells of
 * the subset whose digit is not in the subset can be eliminated.
 *
 * @since 0.0.3
 *
 * @param grid The grid to solve.
 * @param level The level of the subset to find.
 * @returns A list of objects describing where a candidate can be eliminated.
 *
 * @example
 * const grid = parseGrid(
 *   ":0210:123589:....+6........4273+6..67+3..4..94....+6+8....96+4.+7+6.7.+5.+9231......85.6..8.27+1..5.1..+9+4::112 211 212 311 312 511 512 811 812 911: ",
 *   true,
 * );
 * const results = eliminateHiddenSubset(grid, SubsetType.Triple);
 * eliminationDescription(results[0]);
 * // => "Hidden Pair: 4,7 in r1c12 => r1c2<>1, r1c12<>2, r1c12<>3, r1c12<>5, r1c12<>8, r1c1<>9"
 *
 * @see http://sudopedia.enjoysudoku.com/Hidden_Subset.html
 * @see http://sudopedia.enjoysudoku.com/Hidden_Pair.html
 * @see http://sudopedia.enjoysudoku.com/Hidden_Triple.html
 * @see http://sudopedia.enjoysudoku.com/Hidden_Quad.html
 */
function eliminateHiddenSubset(grid, level) {
    return remeda_1.pipe(house_1.HOUSES_LIST, remeda_1.map(getHiddenSubsetData(grid.candidates)), remeda_1.map(subset_1.findSubsets(level)), remeda_1.flatten(), remeda_1.map(getHiddenSubsetEliminationResult(grid.candidates, level)), remeda_1.filter((result) => result.eliminations.length > 0));
}
exports.eliminateHiddenSubset = eliminateHiddenSubset;
