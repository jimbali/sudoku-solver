import { CellCoord, Digit, House, HouseIndex, LineType } from "../../../types";
export declare type EliminationTechnique = "Locked Candidates Type 1 (Pointing)" | "Locked Candidates Type 2 (Claiming)" | "Naked Pair" | "Naked Triple" | "Naked Quadruple" | "Locked Pair" | "Locked Triple" | "Hidden Pair" | "Hidden Triple" | "Hidden Quadruple" | "X-Wing" | "Swordfish" | "Jellyfish";
export declare enum EliminationImplicationType {
    DigitInHouse = 0,
    Subset = 1,
    Fish = 2
}
export declare type EliminationImplicationDigitInHouse = {
    readonly type: EliminationImplicationType.DigitInHouse;
    readonly digit: Digit;
    readonly house: House;
};
export declare type EliminationImplicationSubset = {
    readonly type: EliminationImplicationType.Subset;
    readonly cells: readonly CellCoord[];
    readonly digits: readonly Digit[];
};
export declare type EliminationImplicationFish = {
    readonly type: EliminationImplicationType.Fish;
    readonly line: LineType;
    readonly digit: Digit;
    readonly baseSet: readonly HouseIndex[];
    readonly coverSet: readonly HouseIndex[];
};
export declare type EliminationImplication = EliminationImplicationDigitInHouse | EliminationImplicationSubset | EliminationImplicationFish;
export declare type EliminationCandidate = {
    readonly digit: Digit;
    readonly coords: readonly CellCoord[];
};
export declare type EliminationResult = {
    readonly technique: EliminationTechnique;
    readonly eliminations: readonly EliminationCandidate[];
    readonly implication?: EliminationImplication;
};
