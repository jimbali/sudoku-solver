import { SudokuGrid } from "../../../../types";
import { EliminationResult } from "../types";
import { SubsetType } from "../subset";
/**
 * A Basic Fish is formed with a digit that is a candidate for N lines (rows or columns) - the base set - on exactly N
 * opposite lines - the cover set. All candidates of the digit that are on the lines of the cover set but not on the
 * base set can be eliminated.
 *
 * @since 0.0.3
 *
 * @param grid The grid to solve.
 * @param level The level of the subset to find.
 * @returns A list of objects describing where a candidate can be eliminated.
 *
 * @example
 * const grid = parseGrid(
 *   ":0301:2:16.54+3.7..+78+6.1+43+5+43+58.+7+6.+17+2.+45+8.696..9+12.57...+3+7+6..+4.+1+6.3..4.+3...+8..16..+71645.+3::268 271:r239 c158 ",
 *   true,
 * );
 * const results = eliminateBasicFish(grid, SubsetType.Triple);
 * eliminationDescription(results[0]);
 * // => "Swordfish: 2 r239 c158 => r6c8,r7c1<>2"
 *
 * @see http://sudopedia.enjoysudoku.com/Fish.html
 * @see http://sudopedia.enjoysudoku.com/X-Wing.html
 * @see http://sudopedia.enjoysudoku.com/Swordfish.html
 * @see http://sudopedia.enjoysudoku.com/Jellyfish.html
 */
export declare function eliminateBasicFish(grid: SudokuGrid, level: SubsetType): readonly EliminationResult[];
