"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../solver/logical/eliminating/types");
const cellsIdentifiers_1 = require("./cellsIdentifiers");
const housesIdentifiers_1 = require("./housesIdentifiers");
const remeda_1 = require("remeda");
const ramda_1 = require("ramda");
const house_1 = require("../../utils/house");
const getImplication = (implication) => {
    return (ramda_1.cond([
        [
            (i) => i.type === types_1.EliminationImplicationType.DigitInHouse,
            (i) => `${i.digit} in ${housesIdentifiers_1.houseIdentifier(i.house)} => `,
        ],
        [
            (i) => i.type === types_1.EliminationImplicationType.Subset,
            (i) => `${i.digits} in ${cellsIdentifiers_1.cellsIdentifiers(i.cells)} => `,
        ],
        [
            (i) => i.type === types_1.EliminationImplicationType.Fish,
            (i) => i.digit +
                " " +
                housesIdentifiers_1.housesIdentifiers(remeda_1.filter(i.line === "row" ? house_1.ROWS_LIST : house_1.COLUMNS_LIST, (house) => ramda_1.includes(house.index, i.baseSet))) +
                " " +
                housesIdentifiers_1.housesIdentifiers(remeda_1.filter(i.line === "row" ? house_1.COLUMNS_LIST : house_1.ROWS_LIST, (house) => ramda_1.includes(house.index, i.coverSet))) +
                " => ",
        ],
    ])(implication) || "");
};
/**
 * Give a description of an elimination (e.g. "Locked Candidates Type 1 (Pointing): 5 in b1 => r3c7<>5" means that the
 * candiadte 5 can be eliminated in the cell on row 3 and column 7 according to the Locked Candidates Type 1 technique
 * beacaus the digit 5 is in box 1).
 *
 * @since 0.0.3
 *
 * @param eliminationResult The elimination to describe.
 * @returns {string} A description of the elimination.
 *
 * @example
 * const grid = parseGrid(
 *   ":0101:7:+31+8..+54.+6...6.3+8+1...6.8.+5.38+6+495+21+3+7+12+34+7+6+958795+3+1+8+2+6+4.+3.5..7+8......7+3.+5....3+9641::732:",
 * );
 * const result = eliminateLockedCandidates({ digits: grid.digits, candidates: getCandidates(grid.digits) });
 * eliminationDescription(result[0]);
 * // => "Locked Candidates Type 2 (Claiming): 7 in r2 => r3c2<>7"
 */
function eliminationDescription(eliminationResult) {
    const implication = eliminationResult.implication ? getImplication(eliminationResult.implication) : "";
    const eliminations = remeda_1.map(eliminationResult.eliminations, (e) => `${cellsIdentifiers_1.cellsIdentifiers(e.coords)}<>${e.digit}`);
    return `${eliminationResult.technique}: ${implication}${ramda_1.join(", ", eliminations)}`;
}
exports.eliminationDescription = eliminationDescription;
